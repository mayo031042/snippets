{
    // Place your snippets for shellscript here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "pipeinput": {
        "prefix": "pipeinput",
        "body": [
            "if [ -p /dev/stdin ]; then",
            "    $1=$(cat -)",
            "else",
            "    $1=\"$$1\"",
            "fi\n",
            "if [ \"$$1\" = \"\" ]; then",
            "    input=$(pbpaste)",
            "fi\n$0"
        ],
        "description": "pipe"
    },
    "pipe": {
        "prefix": "pipe",
        "body": [
            "#!/bin/zsh",
            "function fun() {",
            "    for i in $(cat -); do",
            "        $0",
            "    done",
            "}\n",
            "# if ~ fi にパイプをつなげると有効な方の標準出力を受け取れる",
            "if [ -p /dev/stdin ]; then",
            "    cat -",
            "else",
            "    echo $@",
            "fi | fun"
        ],
        "description": "pipe"
    },
    "arg": {
        "prefix": "arg",
        "body": [
            "if [ \"$$1\" = \"$2\" ]; then",
            "\t$0",
            "\texit",
            "fi\n"
        ],
    },
    "areg": {
        "prefix": "areg",
        "body": [
            "if [[ \"$$1\" =~ $$2 ]]; then",
            "\t$1=$(echo \"$$1\" | sed \"s/$$2//\")$0",
            "fi\n"
        ],
    },
    "ifor": {
        "prefix": "ifor",
        "body": [
            " || [ \"$$1\" = \"$2\" ]"
        ],
    },
    "arglen": {
        "prefix": "arglen",
        "body": [
            "if [ ${#$1} -eq $2 ]; then",
            "\t$0",
            "fi\n"
        ],
    },
    "preline": {
        "prefix": "repline",
        "body": [
            "IFS=$'\\n'",
            "for $1 in $$2; do",
            "\t$0",
            "done",
            "IFS=$' \\t\\n'"
        ],
    },
    "argp": {
        "prefix": "argp",
        "body": [
            "while [[ $# -gt 0 ]]; do",
            "\tcase $ 1 in",
            "\t$1) $0 ;;",
            "\t*) help ;;",
            "\tesac",
            "\tshift",
            "done\n"
        ],
    }
}